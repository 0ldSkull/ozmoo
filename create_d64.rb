#!/usr/bin/ruby
# converts zmachine file (*.z3, *.z5 etc.) to Commodore 64 floppy (*.d64)

# $16500 = 91392 = 357 (18,0)

# This is ugly. Ruby isn't good at handling binary data
$zerobyte = [0].pack("C")
$ffbyte = [255].pack("C")
# Hard coded BAM, to be replaced with proper allocation
$track1801 = [
    0x12,0x01, # track/sector
    0x41, # DOS version
    0x00, # unused
    # mark track 1-16, sector 1-16 as reserved for story files
    0x05,0x00,0x00,0x1f, # track 01 (21 sectors)
    0x05,0x00,0x00,0x1f, # track 02
    0x05,0x00,0x00,0x1f, # track 03
    0x05,0x00,0x00,0x1f, # track 04
    0x05,0x00,0x00,0x1f, # track 05
    0x05,0x00,0x00,0x1f, # track 06
    0x05,0x00,0x00,0x1f, # track 07
    0x05,0x00,0x00,0x1f, # track 08
    0x05,0x00,0x00,0x1f, # track 09
    0x05,0x00,0x00,0x1f, # track 10
    0x05,0x00,0x00,0x1f, # track 11
    0x05,0x00,0x00,0x1f, # track 12
    0x05,0x00,0x00,0x1f, # track 13
    0x05,0x00,0x00,0x1f, # track 14
    0x05,0x00,0x00,0x1f, # track 15
    0x05,0x00,0x00,0x1f, # track 16
    0x15,0xff,0xff,0x1f, # track 17
    0x11,0xfc,0xff,0x07, # track 18 (19 sectors)
    0x13,0xff,0xff,0x07, # track 19
    0x13,0xff,0xff,0x07, # track 20
    0x13,0xff,0xff,0x07, # track 21
    0x13,0xff,0xff,0x07, # track 22
    0x13,0xff,0xff,0x07, # track 23
    0x13,0xff,0xff,0x07, # track 24
    0x12,0xff,0xff,0x03, # track 25 (18 sectors)
    0x12,0xff,0xff,0x03, # track 26
    0x12,0xff,0xff,0x03, # track 27
    0x12,0xff,0xff,0x03, # track 28
    0x12,0xff,0xff,0x03, # track 29
    0x12,0xff,0xff,0x03, # track 30
    0x11,0xff,0xff,0x01, # track 31 (17 sectors)
    0x11,0xff,0xff,0x01,0x11,0xff,0xff,0x01,
    0x11,0xff,0xff,0x01,0x11,0xff,0xff,0x01,
    0x44,0x45,0x4a,0x41,0x56,0x55,0xa0,0xa0,
    0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0, # label (DEJAVU)
    0xa0,0xa0,0x30,0x30,0xa0,0x32,0x41,0xa0,
    0xa0,0xa0,0xa0,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
].pack("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC")

def get_track_length(track)
    if track <= 17 then
        sectors = 21
    elsif track <= 24 then
        sectors = 19
    elsif track <= 30 then
        sectors = 18
    else
        sectors = 17
    end
    sectors
end

def add_1801(d64_file)
    d64_file.write $track1801
end

def add_1802(d64_file)
    d64_file.write $zerobyte 
    d64_file.write $ffbyte 
    254.times do
        d64_file.write $zerobyte 
    end
end

def add_zeros(d64_file)
    256.times do
        d64_file.write $zerobyte 
    end
end

def add_story_data(story_file, d64_file)
    story_data_added = false
    256.times do
        if story_file.eof? then
            d64_file.write $zerobyte
        else
            story_data_added = true
            byte = story_file.read(1)
            d64_file.write byte
        end
    end
    story_data_added
end

def create_d64(story_filename, d64_filename)
    begin
        story_file = File.open(story_filename, "rb")
    rescue
        puts "ERROR: Can't open #{story_filename} for reading"
        exit 0
    end
    begin
        d64_file = File.open(d64_filename, "wb")
    rescue
        puts "ERROR: Can't open #{d64_filename} for writing"
        story_file.close
        exit 0
    end

    puts "Creating..."

    for track in 1..35 do
        print "#{track}:"
        for sector in 1.. get_track_length(track) do
            print " #{sector}"
            if track == 18 && sector == 1 then
                print "*"
                add_1801(d64_file)
            elsif track == 18 && sector == 2 then
                print "*"
                add_1802(d64_file)
            elsif track == 18 then
                add_zeros(d64_file)
            elsif sector <=16 then
                if add_story_data(story_file, d64_file) then
                    # TODO: allocated this block in BAM (data was written)
                    print "*"
                end
            else
                add_zeros(d64_file)
            end
        end
        puts
    end

    story_file.close
    d64_file.close

end

if ARGV.length != 2 then
    puts "Usage: convert_db <zmachine file> <d64 file"
    exit 0
end
story_filename = ARGV[0]
d64_filename = ARGV[1]

create_d64(story_filename, d64_filename)
puts "Done!"
exit 0

