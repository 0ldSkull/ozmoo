Known bugs
----------
A message which ends in the last column gets an extra line break.
- test by writing a long unknown word in BZ. If the error message is just
long enough to reach the last column there will be an extra newline

No words are recognized in Tethered.

Statusline longer than 40 characters overflows into main window.

Statusline messed up after restore in BZ.

Player input line longer than one screen line (40 characters) doesn't work.

Timed input in v4 games may be broken.

Ideas for tasks / subprojects to do next
----------------------------------------
Allow user to choose save/restore device, including tape, in non vmem mode. (Is this feasible?)

Build config utility. Could be in same location as Z-machine stack and accessible on boot.

Figure out if some commandline flags to Acme are no longer useful enough to be kept.

*** Speed ***
- Optimize object manipulation and object tree manipulation
- Optimize screen kernal
- Setup profiling, where we can see how much time is spent in different instructions over a session (Log # of executions and # of timer ticks).
- Add fast-loader code?

Color support

Output transcript to printer support.

Create easy-to-use tool (Wizard style?) to pick a story file and build disk image(s) with the right interpreter etc. Shouldn't require building anything from source code, installing third-party software etc.

Support REU for caching.

; Instructions which have not yet been fully implemented
; ------------------------------------------------------
; 0OP
; ---
;
; 1OP
; ---
;
; 2OP
; ---
;
; VAR
; ---
; input_stream
;
; EXT
; ---
; save			; Save game state works. Save a memory area doesn't. Parameters are ignored.
; restore		; Restore game state works. Restore a memory area doesn't. Parameters are ignored.


Possible alternative versions / extensions
------------------------------------------
* Support for C1581 disks (can hold 3160 blocks of user data)
* Support for SD2IEC, which can use fileseek operators to load any part of a file in the file system.
* Support for REU
* A build mode where the whole game fits in memory from the start, and load/save will use the same device as the game was loaded from (tape or a disk drive)
* C128 version which can use a C1571, additional RAM and 80-column mode.
* PET version
* Plus/4 version
* Apple II version


DONE (Implemented features and fixed bugs)
------------------------------------------
set_colour implemented

Create our own screen handling routines to give us full control, including not scrolling status line off screen.

Timed input using an interval of more than 255 tenths of a second hasn't been implemented properly.

Timing during timed input is off on NTSC computers.

Praxix: Streamtrip test fails on character 0 and character 64 (@) being mixed up, and the character count being off by one.

BZ: flush toilet twice with the document and the towel inside goes wrong. First the document disappears, but a shred of the document remains. However, the toilet is empty. -- EXAMINE TOILET says the toilet is empty, but SEARCH TOILET reveals the shred. Works the same in Infocoms C64 terp.

Vmem optimization  mode ( -o ) is not working. Game freezes after the initial message has been printed.

Files are listen in the wrong order in save/restore.

Restore doesn't list files in non-vmem game.

Restoring from an empty save slot crashes the game.

Player gets no chance to read message printed just before save, as used in HH and Planetfall.

Status line covering several lines isn't working correctly (Nord and Bert).

AMFV: Status line updates are printed in the main window.
- works, but AMFV is designed for 80 characters, so the status line still
looks strange. This can't be fixed.

Can't write @ with new screenkernal

Make non vmem mode work, and build exactly the code that is needed.

Make non all_ram mode work, and build exactly the code that is needed.

Variable stack size. 

Optionally limit stack to allow no more than 127 values pushed in a single frame. This would make code faster and smaller. -- Tried this.

A 256 word stack, which can be made faster and with simpler code to access it. -- Tried this, and it gave very small gains in both speed and size. Also, some games definitely need a bigger stack. Will not do.

Restore prints "Restore failed." in Borderzone, even if the restore succeeded.

Borderzone shows bad random phrases in the intro text
"He will... greet you with the words 'mk'...", or similar, should be
"Pardon me" or similar instead of mk
(This was because of older versions of Vice not handling 40-track disks correctly)

Option to display whenever then stack size hits a new record, either in total bytes used, or in bytes pushed onto the stack in a single frame.

Bug in Ad Verbum: No words are understood.

If you hit enter at the more-prompt when the game asks you to choose a chapter in Borderzone, it is interpreted as a choice (which is invalid).

You can't pick anything up at the beginning of part 1 in Borderzone: "[I beg your pardon?]".

If you try to move around on the train in Borderzone, you get some surprising results: "kill man" is treated like a direction, "w" is confused with "n" etc. 

Clearing screen doesn't always reset the number of rows printed, so a MORE prompt can appear too early. (Run Borderzone, choose part 1)

save/restore
	Copy SP and PC (and stack_pushed_bytes?) to below stack. Save this, stack and dynmem as one file.

- support custom alphabets in Z5 onwards

Ending player input with Commodore-Enter puts the game in a state where it doesn't register player input, and thus becomes unplayable.

Entering uppercase letters or PETSCII graphic characters as player input results in a fatal error.

*** Speed ***
- Optimize player input encoding
- Figure out what the cause of slowness in printing the test suite names in Praxix is. See if it can be made faster.
- Make memory reading more efficient. While reading continuous memory, we only need to check RAM address at first byte and when entering a new page.
    Old todo: - reuse index and skip tests if same block as previous call to read_z_*
- Optimize finding memory blocks in dynmem (predictable position) / not in dynmem. Figure out if quick-access table should be used for both or just for non-dynmem

Move config information to location in memory where it is now loaded on game start. Keep in temp directory to aid debugging. (Didn't do, since this would make it impossible to write a config utility)

Simplify code to find sector if interleave = 1. (Tried it, but with no apparent gain in speed)

Typing "TURN BUCK EAS" and then pressing backspace twice gives an error saying the word "EAS" isn't recognized.

copy_table can't copy from statmem (and maybe it has other bugs as well).

* A possibility to embed a custom font

TAKE AUNT in HH prints "You can't see !unt here!"

Room description in Top Landing (E, N, E) in HH lacks last ".". This may have something to do with the dot being the only character which doesn't fit on the last line. 

Buffered printing should be able to break lines after a dash (-).

Objects in the room are not shown in minform.z5

It's impossible to choose scenario at the beginning of Nord and Bert.

Tokenize using a non-ordered dictionary doesn't work.

Support for all possible build modes for one or two 1541 drives.

Calling print_trace destroys value in $fb. Haven't been able to figure out why.

Put story data *last* on combined boot+story disk if using an extended disk (since DOS can't read files on track 36+)

Don't try preload sizes smaller than dynmem.

make.rb should figure out the Z-machine version from the story file.

Put z_operand_value_(low/high)_arr, z_operand_type_arr and other locals in zmachine.asm on zeropage. Saves 200+ bytes and makes all instructions faster.

Make game ask to insert disk X in drive Y at the right times.

Print messages at game start telling player which disks to insert into which drives.

Build auto-config routine, which selects sensible device numbers for all disks which have device# = 0 (auto select).

Allow PREOPT mode to be ended with a special command (xxx).

Use binary search to search dictionary faster.

Figure out how to best place loader, interpreter and different parts of story file on 1, 2 or 3 disk sides.
Old todo: - rewrite floppy access code to use all available sectors
Old todo: - support splitting of large files onto two floppies

Don't store dynmem in raw disk sectors if it is part of the preloaded data. (Requires restart opcode to load the loader again)

Alter make.rb so it can decrease the amount of data to preload, just enough to make a game fit on a disk.

Write a guide on how to build a game, with two sections: As simple as possible, and with preload optimizations.

Print a line before each prompt in preload optimization mode: "[PREOPT mode. Type $$$ to exit early.]"

Add a flag (-o) to build the terp and game in PREOPT mode. Give reference to the build guide for the details of PREOPT mode.

Start using the term PREOPT mode to describe the mode which you can use to optimize the blocks which are to be preloaded when the game starts. Change the flag name to PREOPT and make sure this term is used consistently in make.rb and in the docs.

Document all flags which can be used to change how the interpreter is assembled. 

Typing SCORE gives a text with words "pointS" and "turnS".

- the .block range in readblocks need to be increased

Fix random opcode (see notes under Instructions... below)

- Czech tests: https://github.com/DustinCampbell/ZGo/tree/master/zcode/czech
  https://www.ifarchive.org/indexes/if-archiveXinfocomXinterpretersXtools.html

- space, comma, newline, printx, printy, printa, etc. only in DEBUG

catch/throw

Buffering/word wrap

[MORE] prompts

Timed input
Old todo: - allow delay/routine in read_text

Basic sound effect support (low-pitched beep and high-pitched beep)

Extend virtual memory RAM up to $ffff (And disable trace automatically if RAM at page $cf00 is used for Vmem)
Old todo: - use more memory, $E000-$FFFF, perhaps also $D000-$E000?

Create PETSCII <-> ZSCII conversion routines. Make them fast.

Improve ZSCII / PETSCII conversion with special cases for accented characters

System to enable support for Swedish, German, French games etc. Maybe with option to include custom character set?









