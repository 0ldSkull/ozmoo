Known bugs
----------
Clearing screen doesn't always reset the number of rows printed, so a MORE prompt can appear too early. (Run Borderzone, choose part 1)

You can't pick anything up at the beginning of part 1 in Borderzone. "[I beg your pardon?]

Status line covering several lines isn't working correctly (Nord and Bert).

It's impossible to choose scenario at the beginning of Nord and Bert.

TAKE AUNT in HH prints "You can't see !unt here!"

Typing "TURN BUCK EAS" and then pressing backspace twice gives an error saying the word "EAS" isn't recognized.

Room description in Top Landing (E, N, E) in HH lacks last ".".



Ideas for tasks / subprojects to do next
----------------------------------------
Build config utility. Could be in same location as Z-machine stack and accessible on boot.

Figure out if some commandline flags to Acme are no longer useful enough to be kept.

*** Speed ***
- Setup profiling, where we can see how much time is spent in different instructions over a session (Log # of executions and # of timer ticks).
- Add fast-loader code?

- support custom alphabets in Z5 onwards

Color support

Output transcript to printer support.

save/restore
	Copy SP and PC to below stack. Save this, stack and dynmem as one file.

Create our own screen handling routines to give us full control, including not scrolling status line off screen.

Create easy-to-use tool (Wizard style?) to pick a story file and build disk image(s) with the right interpreter etc. Shouldn't require building anything from source code, installing third-party software etc.

; Instructions which have not yet been fully implemented
; ------------------------------------------------------
; 0OP
; ---
; save
; restore
; restart
;
; 1OP
; ---
;
; 2OP
; ---
; set_colour
;
; VAR
; ---
; input_stream
;
; EXT
; ---
; save
; restore
; print_unicode
; check_unicode


DONE:
*** Speed ***
- Figure out what the cause of slowness in printing the test suite names in Praxix is. See if it can be made faster.
- Make memory reading more efficient. While reading continuous memory, we only need to check RAM address at first byte and when entering a new page.
    Old todo: - reuse index and skip tests if same block as previous call to read_z_*

Tokenize using a non-ordered dictionary doesn't work.

Support for all possible build modes for one or two 1541 drives.

Calling print_trace destroys value in $fb. Haven't been able to figure out why.

Put story data *last* on combined boot+story disk if using an extended disk (since DOS can't read files on track 36+)

Don't try preload sizes smaller than dynmem.

make.rb should figure out the Z-machine version from the story file.

Put z_operand_value_(low/high)_arr, z_operand_type_arr and other locals in zmachine.asm on zeropage. Saves 200+ bytes and makes all instructions faster.

Make game ask to insert disk X in drive Y at the right times.

Print messages at game start telling player which disks to insert into which drives.

Build auto-config routine, which selects sensible device numbers for all disks which have device# = 0 (auto select).

Allow PREOPT mode to be ended with a special command (xxx).

Use binary search to search dictionary faster.

Figure out how to best place loader, interpreter and different parts of story file on 1, 2 or 3 disk sides.
Old todo: - rewrite floppy access code to use all available sectors
Old todo: - support splitting of large files onto two floppies

Don't store dynmem in raw disk sectors if it is part of the preloaded data. (Requires restart opcode to load the loader again)

Alter make.rb so it can decrease the amount of data to preload, just enough to make a game fit on a disk.

Write a guide on how to build a game, with two sections: As simple as possible, and with preload optimizations.

Print a line before each prompt in preload optimization mode: "[PREOPT mode. Type $$$ to exit early.]"

Add a flag (-o) to build the terp and game in PREOPT mode. Give reference to the build guide for the details of PREOPT mode.

Start using the term PREOPT mode to describe the mode which you can use to optimize the blocks which are to be preloaded when the game starts. Change the flag name to PREOPT and make sure this term is used consistently in make.rb and in the docs.

Document all flags which can be used to change how the interpreter is assembled. 

Typing SCORE gives a text with words "pointS" and "turnS".

- the .block range in readblocks need to be increased

Fix random opcode (see notes under Instructions... below)

- Czech tests: https://github.com/DustinCampbell/ZGo/tree/master/zcode/czech
  https://www.ifarchive.org/indexes/if-archiveXinfocomXinterpretersXtools.html

- space, comma, newline, printx, printy, printa, etc. only in DEBUG

catch/throw

Buffering/word wrap

[MORE] prompts

Timed input
Old todo: - allow delay/routine in read_text

Basic sound effect support (low-pitched beep and high-pitched beep)

Extend virtual memory RAM up to $ffff (And disable trace automatically if RAM at page $cf00 is used for Vmem)
Old todo: - use more memory, $E000-$FFFF, perhaps also $D000-$E000?

Create PETSCII <-> ZSCII conversion routines. Make them fast.

Improve ZSCII / PETSCII conversion with special cases for accented characters

System to enable support for Swedish, German, French games etc. Maybe with option to include custom character set?



Possible alternative versions / extensions
------------------------------------------
* Support for C1581 disks (can hold 3160 blocks of user data)
* Support for SD2IEC, which can use fileseek operators to load any part of a file in the file system.
* Support for REU
* C128 version which can use a C1571, additional RAM and 80-column mode.
* PET version
* Plus/4 version






